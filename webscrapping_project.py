# -*- coding: utf-8 -*-
"""Webscrapping_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ro_NVYCLTe0bVzJ4JoKNNVDLiaLqy5Ne
"""

import requests

def get_book_summary(api_key, isbn):
    # Google Books API endpoint : A base URL is the starting part of a web address that remains constant for a particular web service or API.
    base_url = "https://www.googleapis.com/books/v1/volumes"

    # Construct the request URL
    params = {
        'q': f"isbn:{isbn}",
        'key': api_key,
    }

    try:
        # Make the API request
        response = requests.get(base_url, params=params)
        response.raise_for_status()  # Raise an exception for bad requests

        # Parse the JSON response
        data = response.json()

        # Check if any books were found
        if 'items' in data:
            # Extract book details
            book = data['items'][0]['volumeInfo']
            title = book.get('title', 'N/A')
            authors = ', '.join(book.get('authors', ['Unknown']))
            summary = book.get('description', 'No summary available.')

            # Print or return the book details
            print(f"Title: {title}")
            print(f"Authors: {authors}")
            print(f"Summary: {summary}")

        else:
            print("No books found for the given ISBN.")

    except requests.exceptions.HTTPError as err:
        print(f"HTTP error occurred: {err}")

    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    api_key = "AIzaSyCkHTZL1D3-lrvJdGgZHd4pRnTQpqDcxPA"
    isbn = '9780345391803'
    get_book_summary(api_key, isbn)

"""1. **Import Required Libraries:**
   - The script uses the `requests` library to make HTTP requests.

2. **Define the Google Books API Endpoint:**
   - The base URL for the Google Books API is set as the starting point for requests.

3. **Construct API Request URL:**
   - The script constructs the complete API request URL by appending parameters like the ISBN and API key.

4. **Make API Request:**
   - The script uses the `requests.get()` method to make a request to the Google Books API.

5. **Handle Errors:**
   - The script includes error handling, raising exceptions for HTTP errors or other general exceptions.

6. **Parse JSON Response:**
   - The response from the API is parsed using `response.json()` to convert the JSON data into a Python dictionary.

7. **Extract Book Details:**
   - If books are found in the API response, the script extracts details like title, authors, and summary from the parsed JSON.

8. **Print or Return Results:**
   - The extracted book details are printed to the console, including the title, authors, and summary.

9. **Run the Script:**
   - The script is set up to be executed when the file is run, with a specified API key and ISBN for testing.

## 1. When you make a request to a web API, the data returned by the API is often in a format called JSON (JavaScript Object Notation). JSON is a lightweight data interchange format that is easy for both humans to read and write, and easy for machines to parse and generate. It's a common format for data exchange between a server and a web application.

## 2. In the context of the Google Books API (and many other APIs), the response is typically in JSON format. Therefore, after making an HTTP request to the API endpoint, we need to parse the JSON data to extract the relevant information we are interested in, such as the book details or summary.

## 3. The response.json() method in Python is used to parse the JSON data returned by the API and convert it into a Python data structure (usually a dictionary). Once we have the data as a dictionary, we can easily navigate through it to extract the specific information we need.
"""

